{
  "name": "node-gcm",
  "description": "a Node.JS wrapper library-port for Google Cloud Messaging for Android",
  "version": "0.12.1",
  "author": {
    "name": "Marcus Farkas",
    "email": "toothlessgear@finitebox.com"
  },
  "contributors": [
    {
      "name": "Marcus Farkas",
      "email": "toothlessgear@finitebox.com"
    },
    {
      "name": "monkbroc",
      "email": "jvanier@gmail.com",
      "url": "https://github.com/monkbroc"
    },
    {
      "name": "zlyinfinite",
      "url": "https://github.com/zlyinfinite"
    },
    {
      "name": "Yann Biancheri",
      "email": "yann.biancheri@gmail.com",
      "url": "https://github.com/yannooo"
    },
    {
      "name": "Hamid Palo",
      "email": "hamid@fogcreek.com",
      "url": "https://github.com/hamidp"
    },
    {
      "name": "Dotan J. Nahum",
      "email": "jondotan@gmail.com",
      "url": "https://github.com/jondot"
    },
    {
      "name": "Max Rabin",
      "email": "rabin.max@gmail.com",
      "url": "https://github.com/maxrabin"
    },
    {
      "name": "Olivier Poitrey",
      "email": "rs@dailymotion.com",
      "url": "https://github.com/rs"
    },
    {
      "name": "George Miroshnykov",
      "email": "george.miroshnykov@gmail.com",
      "url": "https://github.com/laggyluke"
    },
    {
      "name": "Alejandro Garcia Gil",
      "email": "alejandro@ideaknow.com",
      "url": "https://github.com/Alegege"
    },
    {
      "name": "Ismael Gorissen",
      "email": "ismael.gorissen@gmail.com",
      "url": "https://github.com/igorissen"
    },
    {
      "name": "Joris Verbogt",
      "email": "joris@notifica.re",
      "url": "https://github.com/silentjohnny"
    },
    {
      "name": "goelvivek",
      "email": "goelvivek2011@gmail.com",
      "url": "https://github.com/goelvivek"
    },
    {
      "name": "Lars Jacob",
      "email": "lars@jaclar.net",
      "url": "https://github.com/jaclar"
    },
    {
      "name": "Roman Iakovlev",
      "email": "roman.iakovlev@here.com",
      "url": "https://github.com/RomanIakovlev"
    },
    {
      "name": "Roman Skvazh",
      "email": "roman.skvazh@gmail.com",
      "url": "https://github.com/rskvazh"
    },
    {
      "name": "Jeremy Goldstein",
      "email": "jg-dev@live.com",
      "url": "https://github.com/jg10"
    },
    {
      "name": "Adam Patacchiola",
      "email": "adam@2fours.com",
      "url": "https://github.com/surespot"
    },
    {
      "name": "Ivan Longin",
      "email": "ivan.longin@infobip.com",
      "url": "https://github.com/ilongin"
    },
    {
      "name": "Paul Bininda",
      "email": "paul@bininda.com",
      "url": "https://github.com/pbininda"
    },
    {
      "name": "Matt Merkes",
      "email": "matt.merkes@gmail.com"
    },
    {
      "name": "Niels Roesen Abildgaard",
      "email": "niels.abildgaard@gmail.com",
      "url": "https://github.com/hypesystem"
    },
    {
      "name": "Nonemoticoner",
      "email": "nonemoticoner@gmail.com",
      "url": "https://github.com/Nonemoticoner"
    },
    {
      "name": "Simen Bekkhus",
      "email": "sbekkhus91@gmail.com",
      "url": "https://github.com/SimenB"
    },
    {
      "name": "Alexander Johansson",
      "email": "alex@dice.fm",
      "url": "https://github.com/KATT"
    },
    {
      "name": "Ashwin R",
      "email": "ashrko619@gmail.com",
      "url": "https://github.com/ashrko619"
    },
    {
      "name": "Kaija Chang",
      "email": "kaija.chang@gmail.com",
      "url": "https://github.com/kaija"
    },
    {
      "name": "Mo Kamioner",
      "email": "mkamioner@gmail.com",
      "url": "https://github.com/mkamioner"
    },
    {
      "name": "Bastien LÃ©onard",
      "email": "bastien.leonard@gmail.com",
      "url": "https://github.com/bastienleonard"
    },
    {
      "name": "Elad Nava",
      "email": "eladnava@gmail.com",
      "url": "https://github.com/eladnava"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/ToothlessGear/node-gcm.git",
    "web": "http://github.com/ToothlessGear/node-gcm"
  },
  "keywords": [
    "google",
    "cloud",
    "push",
    "notifications",
    "android",
    "c2dm",
    "gcm"
  ],
  "main": "index",
  "files": [
    "index.js",
    "lib/"
  ],
  "scripts": {
    "test": "mocha test/**/*Spec.js"
  },
  "dependencies": {
    "request": "^2.27.0",
    "debug": "^0.8.1"
  },
  "devDependencies": {
    "chai": "^2.2.0",
    "mocha": "^2.2.4",
    "proxyquire": "^1.4.0",
    "sinon": "^1.14.1"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">= 0.10.0"
  },
  "bugs": {
    "url": "https://github.com/ToothlessGear/node-gcm/issues"
  },
  "homepage": "https://github.com/ToothlessGear/node-gcm",
  "directories": {
    "test": "test"
  },
  "license": "MIT",
  "readme": "# node-gcm\n\nnode-gcm is a Node.JS library for [**Google Cloud Messaging**](https://developers.google.com/cloud-messaging/).\n\n## Installation\n\n```bash\n$ npm install node-gcm\n```\n\n## Requirements\n\nThis library provides the server-side implementation of GCM.\nYou need to generate an API key ([Sender ID](https://developers.google.com/cloud-messaging/gcm#senderid)).\n\nGCM notifications can be sent to both [Android](https://developers.google.com/cloud-messaging/android/start) and [iOS](https://developers.google.com/cloud-messaging/ios/start).\nIf you are new to GCM you should probably look into the [documentation](https://developers.google.com/cloud-messaging/gcm).\n\n## Example application\n\nAccording to below **Usage** reference, we could create such application:\n\n```js\nvar gcm = require('node-gcm');\n\nvar message = new gcm.Message();\n\nmessage.addData('key1', 'msg1');\n\nvar regTokens = ['YOUR_REG_TOKEN_HERE'];\n\n// Set up the sender with you API key\nvar sender = new gcm.Sender('YOUR_API_KEY_HERE');\n\n// Now the sender can be used to send messages\nsender.send(message, { registrationTokens: regTokens }, function (err, result) {\n\tif(err) console.error(err);\n\telse \tconsole.log(result);\n});\n\n// Send to a topic, with no retry this time\nsender.sendNoRetry(message, { topic: '/topics/global' }, function (err, result) {\n\tif(err) console.error(err);\n\telse \tconsole.log(result);\n});\n```\n\n## Usage\n\n```js\nvar gcm = require('node-gcm');\n\n// Create a message\n// ... with default values\nvar message = new gcm.Message();\n\n// ... or some given values\nvar message = new gcm.Message({\n\tcollapseKey: 'demo',\n\tpriority: 'high',\n\tcontentAvailable: true,\n\tdelayWhileIdle: true,\n\ttimeToLive: 3,\n\trestrictedPackageName: \"somePackageName\",\n\tdryRun: true,\n\tdata: {\n\t\tkey1: 'message1',\n\t\tkey2: 'message2'\n\t},\n\tnotification: {\n\t\ttitle: \"Hello, World\",\n\t\ticon: \"ic_launcher\",\n\t\tbody: \"This is a notification that will be displayed ASAP.\"\n\t}\n});\n\n// Change the message data\n// ... as key-value\nmessage.addData('key1','message1');\nmessage.addData('key2','message2');\n\n// ... or as a data object (overwrites previous data object)\nmessage.addData({\n\tkey1: 'message1',\n\tkey2: 'message2'\n});\n\n// Set up the sender with you API key\nvar sender = new gcm.Sender('insert Google Server API Key here');\n\n// Add the registration tokens of the devices you want to send to\nvar registrationTokens = [];\nregistrationTokens.push('regToken1');\nregistrationTokens.push('regToken2');\n\n// Send the message\n// ... trying only once\nsender.sendNoRetry(message, { registrationTokens: registrationTokens }, function(err, result) {\n  if(err) console.error(err);\n  else    console.log(result);\n});\n\n// ... or retrying\nsender.send(message, { registrationTokens: registrationTokens }, function (err, result) {\n  if(err) console.error(err);\n  else    console.log(result);\n});\n\n// ... or retrying a specific number of times (10)\nsender.send(message, { registrationTokens: registrationTokens }, 10, function (err, result) {\n  if(err) console.error(err);\n  else    console.log(result);\n});\n```\n\nNotice that [you can *at most* send notifications to 1000 registration tokens at a time](https://github.com/ToothlessGear/node-gcm/issues/42).\nThis is due to [a restriction](http://developer.android.com/training/cloudsync/gcm.html) on the side of the GCM API.\n\n## Notification usage\n\n```js\n\nvar message = new gcm.Message();\n\n// Add notification payload as key value\nmessage.addNotification('title', 'Alert!!!');\nmessage.addNotification('body', 'Abnormal data access');\nmessage.addNotification('icon', 'ic_launcher');\n\n// as object\nmessage.addNotification({\n  title: 'Alert!!!',\n  body: 'Abnormal data access',\n  icon: 'ic_launcher'\n});\n\n```\n\n### Notification payload option table\n\n|Parameter|Platform|Usage|Description|\n|---|---|---|---|\n|title|Android, iOS (Watch)|Required (Android), Optional (iOS), string|Indicates notification title. This field is not visible on iOS phones and tablets.|\n|body|Android, iOS|Optional, string|Indicates notification body text.|\n|icon|Android|Required, string|Indicates notification icon. On Android: sets value to myicon for drawable resource myicon.png.|\n|sound|Android, iOS|Optional, string|Indicates sound to be played. Supports only default currently.|\n|badge|iOS|Optional, string|Indicates the badge on client app home icon.|\n|tag|Android|Optional, string|Indicates whether each notification message results in a new entry on the notification center on Android. If not set, each request creates a new notification. If set, and a notification with the same tag is already being shown, the new notification replaces the existing one in notification center.|\n|color|Android|Optional, string|Indicates color of the icon, expressed in #rrggbb format|\n|click_action|Android, iOS|Optional, string|The action associated with a user click on the notification. On Android, if this is set, an activity with a matching intent filter is launched when user clicks the notification. For example, if one of your Activities includes the intent filter: (Appendix:1)Set click_action to OPEN_ACTIVITY_1 to open it. If set, corresponds to category in APNS payload.|\n|body_loc_key|iOS|Optional, string|Indicates the key to the body string for localization. On iOS, this corresponds to \"loc-key\" in APNS payload.|\n|body_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in body string for localization. On iOS, this corresponds to \"loc-args\" in APNS payload.|\n|title_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in title string for localization. On iOS, this corresponds to \"title-loc-args\" in APNS payload.|\n|title_loc_key|iOS|Optional, string|Indicates the key to the title string for localization. On iOS, this corresponds to \"title-loc-key\" in APNS payload.|\n\nNotice notification payload defined in [GCM Connection Server Reference](https://developers.google.com/cloud-messaging/server-ref#table1)\n\n## Debug\n\nTo enable debug mode (print requests and responses to and from GCM),\nset the `DEBUG` environment flag when running your app (assuming you use `node app.js` to run your app):\n\n```bash\nDEBUG=node-gcm node app.js\n```\n\n## Donate\n\n Bitcoin: [13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ](https://blockchain.info/address/13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ)\n",
  "readmeFilename": "README.md",
  "_id": "node-gcm@0.12.1",
  "dist": {
    "shasum": "d109aec106a8a3f52b87fcf58c192f6c4a234368"
  },
  "_from": "node-gcm@",
  "_resolved": "https://registry.npmjs.org/node-gcm/-/node-gcm-0.12.1.tgz"
}
